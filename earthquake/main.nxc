/* A simple robot that echoes bluetooth messages. */

#define IN_QUEUE 0x0
#define OUT_QUEUE 0x1

#define turn_left RotateMotorEx(OUT_AB, 40, -306, 100, true, true)
#define turn_right RotateMotorEx(OUT_AB, 40, -406, -100, true, true)
#define forward RotateMotorEx(OUT_AB, 40, -360, 0, true, true);

#define PLANE_WIDTH 3
#define PLANE_HEIGHT 3 

// Initialise the plane array. A single dimension is used instead of a 
// multi-dimensional array for simplicity of marshalling the data.
sub init_plane(byte &plane[]) {
	int len = PLANE_WIDTH * PLANE_HEIGHT;
	ArrayInit(plane, '0', len);
}

/* Whenever the plane is updated, encode the plane as a string and send to the
   host for interpretation.
   
   A plane with width=5 and height=3 contained within a single dimension array
   would look as follows, with numbers representing the index positions of the
   cells:
   
   00 01 02 03 04
   05 06 07 08 09
   10 11 12 13 14

sub update_plane(byte &plane[], int x, int y, byte value) {
	plane[x + (y * PLANE_WIDTH)] = value;
	string encoded_plane;
	ByteArrayToStrEx(plane, encoded_plane);
	SendMessage(OUT_QUEUE, encoded_plane);	
}

task main() {
	/*string msg_in;
	while (true) {
		until (ReceiveMessage(IN_QUEUE, true, msg_in) == NO_ERR);
		string msg_out = StrCat("Robot says: ", msg_in);
		string msg_out = "Hello from robot";
		SendMessage(OUT_QUEUE, msg_out);
		Wait(1000);
	}*/
	
	//int plane[][];
	byte plane[];
	// int len = PLANE_WIDTH * PLANE_HEIGHT;
	// ArrayInit(plane, '0', len);
	init_plane(plane);
	
	update_plane(plane, 0, 0, '9');
	update_plane(plane, 1, 2, 'b');
	
	// string output;
	// ByteArrayToStrEx(plane, output);
// 	
	// SendMessage(OUT_QUEUE, output);
	
	//ArrayInit(plane, 0, 10);
	
	// string encoded_plane;
	// for (int x = 0; x < PLANE_WIDTH; x++) {
		// string y_col = ByteArrayToStr(plane[x]);
// 		
		// // for (int y = 0; y < PLANE_HEIGHT; y++) {
			// // string x = NumToStr(plane[x][y]);
			// // //StrCat(encoded_plane, , ",");
		// // }
	// }
	
	//plane[0][0] = 9;
	//plane[0][3] = 2;
	//plane[0][7] = 7;
	//plane[0][0] = 4;
	//string msg = ByteArrayToStr(plane[0]);
	//TextOut(0, LCD_LINE1, msg);
	//mOut(0, LCD_LINE1, ArrayLen(plane));
	
	
	// TextOut(0, LCD_LINE1, output);
	// NumOut(0, LCD_LINE2, plane[0]);
	// NumOut(0, LCD_LINE3, plane[1]);
	
	//SendMessage(OUT_QUEUE, "hello");
	//SendMessage(OUT_QUEUE, msg);
	Wait(6000);
	
	//SetSensorColorFull(S2);
	//ColorSensorReadType csr;
	//csr.Port = S2;
	
	/*for (int i = 0; i < 10; i++) {
		
		unsigned int rawData[];
		int result = ReadSensorColorRaw(S2, rawData);
		string msg = StrCat(
			NumToStr(rawData[0]), 
			",", 
			NumToStr(rawData[1]), 
			",", 
			NumToStr(rawData[2])
			);
		SendMessage(OUT_QUEUE, msg);
		
		
		//ReadSensorColorRaw
		//SysColorSensorRead(csr);
		//if (csr.Result == NO_ERR) {
			//NumOut(0, LCD_LINE1, csr.ColorValue);
		//}		
		
		forward;
		
	}*/
	
	





//	forward;
//	turn_left;
//	turn_right;
	//int light = Sensor(IN_2);
	//NumOut(0, LCD_LINE1, light);
	//Wait(3000);
	
}
